---
version: 2
jobs:
  frontend_build_test:
    docker:
      - image: circleci/node:8.12.0
    working_directory: ~/dos
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-dependencies-{{ checksum "frontend/yarn.lock" }}
      - setup_remote_docker
      - run:
          name: Install dependencies for lint and test
          command: cd frontend && yarn
      - run:
          name: Lint project & run test
          command: cd frontend && yarn lint && yarn test
      - run:
          name: Set env variables
          command: echo 'export VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run:
          name: Docker build frontend
          command: docker build -t codeyourfuture/directory-of-services-fe:$VERSION --build-arg version=$VERSION ./frontend && docker tag codeyourfuture/directory-of-services-fe:$VERSION codeyourfuture/directory-of-services-fe:latest
      - run:
          name: Docker login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Docker push frontend
          command: docker push codeyourfuture/directory-of-services-fe

  backend_build_test:
    docker:
      - image: circleci/node:8.9
        environment:
          NODE_ENV: test
          MAILGUN_API_KEY: 'local'
          MAILGUN_DOMAIN: 'local'
          DATABASE_URL: "postgres://dos@localhost:5432/dos"

      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: dos
          POSTGRES_DB: dos
      - image: circleci/node:8.9
    working_directory: ~/dos
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-dependencies-{{ checksum "backend/yarn.lock" }}
      - setup_remote_docker
      - run:
          name: Set env variables
          command: echo 'export VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run:
          name: Install project dependencies
          command: cd backend && yarn --frozen-lockfile
      - save_cache:
          key: yarn-dependencies-{{ checksum "backend/yarn.lock" }}
          paths:
            - ./backend/node_modules
      - run:
          name: Install dependencies for lint and test
          command: cd backend && yarn lint && yarn
      - run:
          name: Run migrations
          command: cd backend && npm run migrate
          environment:
            NODE_ENV: test
            DATABASE_URL: "postgres://dos@localhost:5432/dos"
      - run:
          name: Rebuild bcrypt
          command: cd backend && npm rebuild bcrypt --build-from-source
      - run:
          name: Run integration tests
          command: cd backend && npm run test:integration
      - store_artifacts:
          path: backend/coverage
      - run:
          name: Docker build backend
          command: docker build -t codeyourfuture/directory-of-services-be:$VERSION --build-arg version=$VERSION ./backend && docker tag codeyourfuture/directory-of-services-be:$VERSION codeyourfuture/directory-of-services-be:latest
      - run:
          name: Docker login
          command: docker login -u $DOCKER_USER -p $DOCKER_PASS
      - run:
          name: Docker push backend
          command: docker push codeyourfuture/directory-of-services-be
  deploy_staging:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - run:
          name: Set env variables
          command: echo 'export VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
      - run:
          name: Install gnupg
          command: sudo apt-get -y install gnupg
      - run:
          name: Get kubeconfig
          command: aws s3 cp s3://$SECRETS_BUCKET/kubectl/config_cyfbot_staging.gpg ./config.gpg
      - run:
          name: Decrypt kubeconfig and set KUBECONFIG
          command: gpg --yes --passphrase="$GPG_KEY" config.gpg
      - run:
          name: Update k8s deployments
          command: |
            KUBECONFIG=$(pwd)/config ./kubectl -n staging set image deployment/dos-dep-be dos-be=codeyourfuture/directory-of-services-be:$VERSION
            KUBECONFIG=$(pwd)/config ./kubectl -n staging set image deployment/dos-dep-fe dos-fe=codeyourfuture/directory-of-services-fe:$VERSION

  deploy_production:
    docker:
      - image: circleci/python:2.7-jessie
    working_directory: ~/repo
    steps:
      - setup_remote_docker
      - run:
          name: Set env variables
          command: echo 'export VERSION=$(echo $CIRCLE_SHA1 | cut -c -7)' >> $BASH_ENV
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          name: Install kubectl
          command: |
            curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x kubectl
      - run:
          name: Install gnupg
          command: sudo apt-get -y install gnupg
      - run:
          name: Get kubeconfig
          command: aws s3 cp s3://$SECRETS_BUCKET/kubectl/config_cyfbot_staging.gpg ./config.gpg
      - run:
          name: Decrypt kubeconfig and set KUBECONFIG
          command: gpg --yes --passphrase="$GPG_KEY" config.gpg
      - run:
          name: Update k8s deployments
          command: |
            KUBECONFIG=$(pwd)/config ./kubectl -n production set image deployment/dos-dep-be dos-be=codeyourfuture/directory-of-services-be:$VERSION
            KUBECONFIG=$(pwd)/config ./kubectl -n production set image deployment/dos-dep-fe dos-fe=codeyourfuture/directory-of-services-fe:$VERSION

workflows:
  version: 2
  build_and_test:
    jobs:
      - frontend_build_test:
          context: build
      - backend_build_test:
          context: build
      - deploy_staging:
          context: deployments_staging
          requires:
            - frontend_build_test
            - backend_build_test
          filters:
            branches:
              only:
                - staging
      - deploy_production:
          context: deployments_production
          requires:
            - frontend_build_test
            - backend_build_test
          filters:
            branches:
              only:
                - master
                - devops
